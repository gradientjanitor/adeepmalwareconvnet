# for the 2015 MICROSOFT KAGGLE MALWARE COMPETITION, the .bytes files
# consist of hexdumps (minus the PE header) of a bunch of malware.
# this is very wasteful of space.  this script takes the train
# and test sets and saves the to a tar file that we can iterate over
# later.

import sys
import glob
import gzip
import argparse
import binascii
import multiprocessing

def ascii_to_gzip(filename):
    h = []

    # open this plaintext hexdump.
    for l in open(filename, "rb").readlines():
        # remove the hex addr; keep those sweet hex chars
        lb = b"".join(l.split()[1:])
        h.append(lb)

    h = b"".join(h)

    # why are there question marks in a hexdump???
    h = h.replace(b"?", b"")

    uid = filename.split("/")[-1]

    with gzip.open("malware_data/" + uid.replace(".bytes", ".gz"), "wb") as fid:
        fid.write(binascii.a2b_hex(h))


parser = argparse.ArgumentParser(description='Put kaggle data back into something thats fast to read.')
parser.add_argument('path', type=str, help='path to data')
args = parser.parse_args()

path = args.path

# get rid of all this hexdump stuff and save em as gzip'd binaries
filepaths = glob.glob(path + "/*/*.bytes")
pool = multiprocessing.Pool()
pool.map(ascii_to_gzip, filepaths)
